return {
  -- LSP Hover Doc ËæπÊ°ÜËÆæÁΩÆ
  {
    "folke/noice.nvim",
    opts = function(_, opts)
      opts.presets.lsp_doc_border = true
      -- Á¶ÅÁî®ÊòæÁ§∫‚ÄúÊó†ÂèØÁî®Ê∂àÊÅØ‚ÄùÊèêÁ§∫
      table.insert(opts.routes, {
        filter = {
          event = "notify",
          find = "No information available",
        },
        opts = { skip = true },
      })
    end,
  },
  {
    "nvim-tree/nvim-web-devicons",
    opts = {
      override_by_extension = {
        ["astro"] = {
          icon = "Ôêß",
          color = "#f1502f",
          name = "Astro",
        },
      },
    },
  },
  --   {
  --     "nvimdev/dashboard-nvim",
  --     event = "VimEnter",
  --     opts = function(_, opts)
  --       opts.config.theme = "hyper"
  --       local logo = [[
  -- " ‚£á‚£ø‚†ò‚£ø‚£ø‚£ø‚°ø‚°ø‚£ü‚£ü‚¢ü‚¢ü‚¢ù‚†µ‚°ù‚£ø‚°ø‚¢Ç‚£º‚£ø‚£∑‚£å‚†©‚°´‚°ª‚£ù‚†π‚¢ø‚£ø‚£∑ ",
  -- " ‚°Ü‚£ø‚£Ü‚†±‚£ù‚°µ‚£ù‚¢Ö‚†ô‚£ø‚¢ï‚¢ï‚¢ï‚¢ï‚¢ù‚£•‚¢í‚†Ö‚£ø‚£ø‚£ø‚°ø‚£≥‚£å‚†™‚°™‚£°‚¢ë‚¢ù‚£á ",
  -- " ‚°Ü‚£ø‚£ø‚£¶‚†π‚£≥‚£≥‚£ï‚¢Ö‚†à‚¢ó‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚¢à‚¢Ü‚†ü‚†ã‚†â‚†Å‚†â‚†â‚†Å‚†à‚†º‚¢ê‚¢ï‚¢Ω ",
  -- " ‚°ó‚¢∞‚£∂‚£∂‚£¶‚£ù‚¢ù‚¢ï‚¢ï‚†Ö‚°Ü‚¢ï‚¢ï‚¢ï‚¢ï‚¢ï‚£¥‚†è‚£†‚°∂‚†õ‚°â‚°â‚°õ‚¢∂‚£¶‚°Ä‚†ê‚£ï‚¢ï ",
  -- " ‚°ù‚°Ñ‚¢ª‚¢ü‚£ø‚£ø‚£∑‚£ï‚£ï‚£Ö‚£ø‚£î‚£ï‚£µ‚£µ‚£ø‚£ø‚¢†‚£ø‚¢†‚£Æ‚°à‚£å‚†®‚†Ö‚†π‚£∑‚°Ä‚¢±‚¢ï ",
  -- " ‚°ù‚°µ‚†ü‚†à‚¢Ä‚£Ä‚£Ä‚°Ä‚†â‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚£ø‚¢à‚°ã‚†¥‚¢ø‚°ü‚£°‚°á‚£ø‚°á‚°Ä‚¢ï ",
  -- " ‚°ù‚†Å‚£†‚£æ‚†ü‚°â‚°â‚°â‚†ª‚£¶‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†∏‚£ø‚£¶‚£•‚£ø‚°á‚°ø‚£∞‚¢ó‚¢Ñ ",
  -- " ‚†Å‚¢∞‚£ø‚°è‚£¥‚£å‚†à‚£å‚†°‚†à‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¨‚£â‚£â‚£Å‚£Ñ‚¢ñ‚¢ï‚¢ï‚¢ï ",
  -- " ‚°Ä‚¢ª‚£ø‚°á‚¢ô‚†Å‚†¥‚¢ø‚°ü‚£°‚°Ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£µ‚£µ‚£ø ",
  -- " ‚°ª‚£Ñ‚£ª‚£ø‚£å‚†ò‚¢ø‚£∑‚£•‚£ø‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø ",
  -- " ‚£∑‚¢Ñ‚†ª‚£ø‚£ü‚†ø‚†¶‚†ç‚†â‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£¶‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü ",
  -- " ‚°ï‚°ë‚£ë‚£à‚£ª‚¢ó‚¢ü‚¢û‚¢ù‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚£ø‚†ø‚†É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚£† ",
  -- " ‚°ù‚°µ‚°à‚¢ü‚¢ï‚¢ï‚¢ï‚¢ï‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚£Ä‚£à‚†ô ",
  -- " ‚°ù‚°µ‚°ï‚°Ä‚†ë‚†≥‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚¢â‚°†‚°≤‚°´‚°™‚°™‚°£ ",
  --       ]]
  --
  --       logo = string.rep("\n", 8) .. logo .. "\n\n"
  --       opts.config.header = vim.split(logo, "\n")
  --       opts.config.week_header.concat = "ÁéãÂ≠êÈ™ëÂ£´"
  --     end,
  --   },
  {
    "nvimdev/dashboard-nvim",
    event = "VimEnter",
    opts = function()
      -- ÂÆúÂøå

      local cmd = "node -e \"console.log(require('${HOME}/.config/nvim/scripts/yiji.js').getTodayYiJi())\""
      local handle = io.popen(cmd)
      local result = handle:read("*a")

      handle:close()

      -- vim.notify(tostring(result), vim.log.levels.INFO)

      local yi = string.match(result, "yi: '(.*)',")
      if yi then
        yi = "ÂÆú: " .. yi
      else
        yi = "üëë"
      end
      -- ÂÆúÂøå
      local opts = {
        theme = "hyper",
        hide = {
          -- this is taken care of by lualine
          -- enabling this messes up the actual laststatus setting after loading a file
          statusline = false,
        },
        config = {
          packages = { enable = true },
          week_header = {
            enable = true,
            concat = yi,
          },
          shortcut = {
            {
              icon = "Óàï ",
              icon_hl = "@variable",
              desc = "Files",
              group = "Label",
              action = "Telescope find_files",
              key = "f",
            },
            { action = "Lazy", group = "@property", desc = " Lazy", icon = "Û∞í≤ ", key = "l" },
            { action = "LazyExtras", group = "DiagnosticHint", desc = " Lazy Extras", icon = "Ó™å ", key = "x" },
            { action = "Telescope live_grep", group = "Number", desc = " Find Text", icon = "ÔÄ¢ ", key = "g" },
            { action = 'lua require("persistence").load()', desc = " Restore Session", icon = "Óçà ", key = "s" },
            { action = "qa", desc = " Quit", icon = "Ôê¶ ", key = "q" },
          },
          footer = function()
            local stats = require("lazy").stats()
            local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
            return { "‚ö° Neovim loaded " .. stats.loaded .. "/" .. stats.count .. " plugins in " .. ms .. "ms" }
          end,
        },
      }

      -- close Lazy and re-open when the dashboard is ready
      if vim.o.filetype == "lazy" then
        vim.cmd.close()
        vim.api.nvim_create_autocmd("User", {
          pattern = "DashboardLoaded",
          callback = function()
            require("lazy").show()
          end,
        })
      end

      return opts
    end,
  },
}
